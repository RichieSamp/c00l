local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlaceId = game.PlaceId

-- Console Info
rconsoleclear()
rconsolename("üåê Harpy Server Hopper")

rconsoleprint("@@LIGHT_BLUE@@")
rconsoleprint("[INFO] Harpy Server Hopper Active!\n")
rconsoleprint("[INFO] PlaceId: " .. PlaceId .. "\n")
rconsoleprint("[INFO] Starting search for low-pop server...\n\n")

local function findLowServer()
    local cursor = ""
    local lowestServerId = nil
    local lowestPlayerCount = math.huge
    local found = false

    while not found do
        local url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100%s", PlaceId, cursor ~= "" and "&cursor=" .. cursor or "")
        local success, result = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)

        if success and result and result.data then
            for _, server in pairs(result.data) do
                if server.playing < lowestPlayerCount and server.playing > 0 then
                    lowestPlayerCount = server.playing
                    lowestServerId = server.id
                    found = true
                end
            end
            if result.nextPageCursor then
                cursor = result.nextPageCursor
            else
                break
            end
        else
            rconsoleprint("@@RED@@[ERROR] Failed to fetch servers from API.\n")
            break
        end
    end

    return lowestServerId, lowestPlayerCount
end

local function hopToLowServer()
    local serverId, playerCount = findLowServer()
    if serverId then
        rconsoleprint("@@GREEN@@[SUCCESS] Found low server!\n")
        rconsoleprint("[INFO] Server ID: " .. serverId .. "\n")
        rconsoleprint("[INFO] Player Count: " .. tostring(playerCount) .. "\n")
        wait(2)
        rconsoleprint("@@YELLOW@@[INFO] Teleporting to low-pop server...\n")
        TeleportService:TeleportToPlaceInstance(PlaceId, serverId, LocalPlayer)
    else
        rconsoleprint("@@RED@@[ERROR] No suitable server found.\n")
    end
end

-- Trigger the hop
hopToLowServer()
